Args: circt-opt comb-to-aig-arith.mlir -pass-pipeline=builtin.module(hw.module(convert-comb-to-synth{additional-legal-ops=comb.xor,comb.or,comb.and,comb.mux},cse)) -o test.mlir --debug 
[mlircontext MLIRContext.cpp:477 1] Load new dialect in Context builtin
[mlircontext MLIRContext.cpp:477 1] Load new dialect in Context builtin
[mlircontext MLIRContext.cpp:477 1] Load new dialect in Context hw
[mlircontext MLIRContext.cpp:477 1] Load new dialect in Context comb
[mlircontext MLIRContext.cpp:477 1] Load new dialect in Context synth
[pass-manager Pass.cpp:1030 1] Starting PassManager run on operation 'module {...}' with 1 passes, verifyPasses=1 pipeline: builtin.module(hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse))
[pass-manager Pass.cpp:1046 2] Registering dependent dialects for pipeline
[pass-manager Pass.cpp:1051 2] Loading dialect: builtin
[pass-manager Pass.cpp:1051 2] Loading dialect: comb
[pass-manager Pass.cpp:1051 2] Loading dialect: synth
[pass-manager Pass.cpp:248 3] Merging adjacent adaptors in pass list
[pass-manager Pass.cpp:256 3] Found first adaptor in chain
[pass-manager Pass.cpp:248 3] Merging adjacent adaptors in pass list
[pass-manager Pass.cpp:305 3] Verifying 2 passes for operation 'hw.module'
[pass-manager Pass.cpp:319 3] Pass list finalization completed successfully
[pass-manager Pass.cpp:305 3] Verifying 1 passes for operation 'builtin.module'
[pass-manager Pass.cpp:319 3] Pass list finalization completed successfully
[pass-manager Pass.cpp:1069 2] Initializing passes with new generation: 1
[pass-manager Pass.cpp:492 2] Initializing pass manager 'builtin.module' (generation 1) with 1 passes
[pass-manager Pass.cpp:510 3] Initializing adaptor pass with 1 nested managers
[pass-manager Pass.cpp:492 2] Initializing pass manager 'hw.module' (generation 1) with 2 passes
[pass-manager Pass.cpp:501 2] Initializing pass 'ConvertCombToSynth'
[pass-manager Pass.cpp:501 2] Initializing pass 'CSE'
[pass-manager Pass.cpp:519 1] Pass manager initialization completed successfully: hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse)
[pass-manager Pass.cpp:519 1] Pass manager initialization completed successfully: builtin.module(hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse))
[pass-manager Pass.cpp:1083 2] Constructing analysis manager for pipeline execution
[pass-manager Pass.cpp:1088 2] Executing pipeline with normal execution
[pass-manager Pass.cpp:1116 2] Executing passes using OpToOpPassAdaptor pipeline
[pass-manager Pass.cpp:658 1] Running pipeline on operation 'module {...}' with 1 passes, verifyPasses=1 pipeline: builtin.module(hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse))
[pass-manager Pass.cpp:549 1] Running pass 'mlir::detail::OpToOpPassAdaptor' on operation 'module {...}' at loc("comb-to-aig-arith.mlir":0:0)
[pass-manager Pass.cpp:908 1] Running pass adaptor asynchronously on operation 'module {...}' with 1 pass managers, verifyPasses=1 pipeline: hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse)
[pass-manager Pass.cpp:922 2] Creating 14 async executors
[pass-manager Pass.cpp:947 2] Collecting operations for async execution
[pass-manager Pass.cpp:721 4] Looking for pass manager that can handle operation 'hw.module' among 1 managers
[pass-manager Pass.cpp:734 4] Found pass manager 'hw.module' that can handle operation 'hw.module'
[pass-manager Pass.cpp:955 2] Operation 'hw.module @parity(in %arg0 : i4, out out : i1) {...}' will use pass manager 'hw.module'
[pass-manager Pass.cpp:973 2] Collected 5 operations for async execution
[pass-manager Pass.cpp:658 1] Running pipeline on operation '[pass-manager Pass.cpp:658 1] Running pipeline on operation 'hw.module @parity(in %arg0 : i4, out out : i1)[pass-manager Pass.cpp:658 1] Running pipeline on operation ' {...}' with 2 passes, verifyPasses=1 pipeline: hw.module(convert-comb-to-synth{additional-legal-ops={comb.xor,comb.or,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse)
[pass-manager Pass.cpp:549 1] Running pass 'ConvertCombToSynth' on operation 'hw.module @parity(in %arg0 : i4, out out : i1) {...}' at loc("comb-to-aig-arith.mlir":6:1)
hw.module @add(in %lhshw.module :  @add_sklanskeyi2, in( in%rhs : [pattern-application PatternApplicator.cpp:40 1]  Ignoring pattern 'i%lhscomb.mux2 : ' because it is impossible to match or cannot lead to legal IR (by cost model), 
out outi : [pattern-application PatternApplicator.cpp:40 1] 3iIgnoring pattern ', 2comb.xorin)' because it is impossible to match or cannot lead to legal IR (by cost model) 
%rhs[pattern-application PatternApplicator.cpp:40 1]  : Ignoring pattern 'comb.xor' because it is impossible to match or cannot lead to legal IR (by cost model)
i[pattern-application PatternApplicator.cpp:40 1] 3Ignoring pattern ', comb.andout' because it is impossible to match or cannot lead to legal IR (by cost model) 
out : [pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'icomb.or3' because it is impossible to match or cannot lead to legal IR (by cost model))
[dialect-conversion:1] 
 [dialect-conversion:1] {...}//===-------------------------------------------===//
[dialect-conversion:1] Legalizing operation : 'hw.module' (0x650f954f1fa0) {
[dialect-conversion:1]   * Fold {
' with 2 passes, verifyPasses=1 pipeline: hw.module( {...}convert-comb-to-synth' with {2additional-legal-ops passes, verifyPasses=={1[pass-manager Pass.cpp:658 1] comb.xor pipeline: Running pipeline on operation 'hw.module,(comb.orconvert-comb-to-synth,comb.and,{comb.muxadditional-legal-ops}={ comb.xormax-emulation-unknown-bits,=comb.or10, comb.andtarget-ir,=comb.muxaig}} ,max-emulation-unknown-bitscse=)10
 target-ir=aig},cse)[pass-manager Pass.cpp:549 1] 
Running pass 'ConvertCombToSynth' on operation '[pass-manager Pass.cpp:549 1] Running pass 'ConvertCombToSynth' on operation 'hw.module @add_kogge_stone(in %lhs : i3, in %rhs : i3, out out : i3)[dialect-conversion:1] hw.module   } -> FAILURE : @add_sklanskeyunable to fold
(in %lhs [dialect-conversion:1]  : {...}} -> FAILURE : no matched legalization pattern
[dialect-conversion:1] i//===-------------------------------------------===//
3' with , 2[dialect-conversion:1] in passes, verifyPasses=
1 [dialect-conversion:1]  pipeline: %rhs//===-------------------------------------------===//
 : hw.module[dialect-conversion:1] (iLegalizing operation : 3convert-comb-to-synth, 'out{comb.parity additional-legal-ops' out={( : 0x650f954ea380comb.xor) {
i,[dialect-conversion:1] 3comb.or)  ,comb.and,comb.mux} max-emulation-unknown-bits=10 target-ir=aig},cse)
[pass-manager Pass.cpp:549 1] Running pass 'ConvertCombToSynth' on operation ' {...}' at %0loc( = ""ccoommbb-.tpoa-raiitgy-"a(rit%h.arg0m)lir": : 33(:1)hw.module
 i4@) -> add_kogge_stonei1(in
 %lhs : [dialect-conversion:1]   * Fold {
i3, in %rhs : i3, out out : i3)[dialect-conversion:1] [pass-manager Pass.cpp:658 1]   Running pipeline on operation '} -> FAILURE : unable to fold
[dialect-conversion:1] 
[dialect-conversion:1]   * Pattern : 'comb.parity -> ()' {
 {...}[pattern-application PatternApplicator.cpp:209 1] Trying to match "' at (anonymous namespace)::CombParityOpConversion"
loc("comb-to-aig-arith.mlir":39:1)
[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.mux' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.xor' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.xor' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.and' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombParityOpConversion | notifyOperationInsertedhw.module[pattern-application PatternApplicator.cpp:40 1]  |  Ignoring pattern 'comb.extractcomb.or
@' because it is impossible to match or cannot lead to legal IR (by cost model)[dialect-conversion:1] add_brent_kung
    ** Insert  : 'comb.extract' (0x7e6264003490) (was detached)
(in %lhs : [dialect-conversion:1] 
i[dialect-conversion:1] 3//===-------------------------------------------===//
, [pattern-logging-listener PatternLoggingListener.cpp:10 1] [dialect-conversion:1] in(anonymous namespace)::CombParityOpConversionLegalizing operation :  | notifyOperationInserted ' | hw.module%rhscomb.extract'  : 
([dialect-conversion:1] i  0x650f954f4d003) {
  , ** Insert  : '[dialect-conversion:1] outcomb.extract   ' (out* Fold {
0x7e6264005520 : ) (was detached)
i3)[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.mux' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-application PatternApplicator.cpp:40 1] (anonymous namespace)::CombParityOpConversionIgnoring pattern ' | notifyOperationInsertedcomb.xor | ' because it is impossible to match or cannot lead to legal IR (by cost model)comb.extract

[dialect-conversion:1]     ** Insert  : '[pattern-application PatternApplicator.cpp:40 1] comb.extractIgnoring pattern '' (comb.xor0x7e6264005b00' because it is impossible to match or cannot lead to legal IR (by cost model))
 (was detached)
[dialect-conversion:1] [pattern-application PatternApplicator.cpp:40 1]   Ignoring pattern '} -> FAILURE : comb.and' because it is impossible to match or cannot lead to legal IR (by cost model)
unable to fold
 {...}[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.or' because it is impossible to match or cannot lead to legal IR (by cost model)
' with [pattern-logging-listener PatternLoggingListener.cpp:10 1] 2(anonymous namespace)::CombParityOpConversion passes, verifyPasses= | notifyOperationInserted1 | [dialect-conversion:1]  pipeline: comb.extract} -> FAILURE : 
hw.module[dialect-conversion:1] (no matched legalization pattern[dialect-conversion:1]   
convert-comb-to-synth
  [dialect-conversion:1] [dialect-conversion:1] ** Insert  : '{//===-------------------------------------------===//
//===-------------------------------------------===//
comb.extractadditional-legal-ops[dialect-conversion:1] [dialect-conversion:1] ' (={Legalizing operation : 
0x7e6264005bc0'comb.xor[dialect-conversion:1] )hw.module,//===-------------------------------------------===//
 (was detached)' comb.or[dialect-conversion:1] 
(,Legalizing operation : 0x650f954f6c00comb.and') {
,comb.add[dialect-conversion:1] comb.mux' }  ( * Fold {
[pattern-logging-listener PatternLoggingListener.cpp:10 1] 0x650f954f52a0max-emulation-unknown-bits(anonymous namespace)::CombParityOpConversion) {
= | notifyOperationInserted[dialect-conversion:1] 10 |    comb.xortarget-ir
=[dialect-conversion:1]     ** Insert  : 'comb.xor' (aig0x7e6264005cc0}), (was detached)cse
)
[dialect-conversion:1]     ** Replace : 'comb.parity'(0x650f954ea380)
[pass-manager Pass.cpp:549 1] Running pass 'ConvertCombToSynth' on operation '[dialect-conversion:1]   } -> FAILURE : unable to fold
[dialect-conversion:1] } -> FAILURE : no matched legalization pattern
[dialect-conversion:1] //===-------------------------------------------===//
[dialect-conversion:1] 
[pattern-application PatternApplicator.cpp:224 1] [dialect-conversion:1]  -> matchAndRewrite //===-------------------------------------------===//
%successful[dialect-conversion:1] 0
Legalizing operation :  = '"comb.addc' o(m0x650f954f6750b) {
.[dialect-conversion:1] [dialect-conversion:1] a
  d[dialect-conversion:1] d  "  (//===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' %(0x7e6264003490arg0) {
, [dialect-conversion:1]     %  arg1) {synth.arch = hw.module "@Sadd_brent_kungK%L0(A = Nin"ScKoE mY%lhsb" : .a}d : id(3"%, (i0%in3 = arg0,  "ic, %rhs3o% : ) -> marg1b).ie3i {x3trasynth.arch, c = outt "out(" : 
K%Oiarg0[dialect-conversion:1] G3))  G* Fold {
E-STONE"} : (i3, i3) -> i3[dialect-conversion:1]   } -> FAILURE :  <
unable to fold
 [dialect-conversion:1] {...}{  * Fold {
[dialect-conversion:1] lowBit
 = [dialect-conversion:1]   * Pattern : 'comb.add0 -> (' at [dialect-conversion:1] )' {
 :   } -> FAILURE : unable to fold
i32}>[pattern-application PatternApplicator.cpp:209 1] Trying to match " : (anonymous namespace)::CombAddOpConversion<false>([dialect-conversion:1] loc("
i
[dialect-conversion:1] "4  c) -> * Pattern : 'ocomb.addim -> (1b)' {
-to-aig-arith.m
l[pattern-application PatternApplicator.cpp:209 1] iTrying to match "r[dialect-conversion:1] (anonymous namespace)::CombAddOpConversion<false>"  "  :
} -> SUCCESS45 : :1)
operation marked legal by the target
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' (0x7e6264005520) {
[dialect-conversion:1]       %1 = "com[pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] b(anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false>. | notifyOperationInserted | notifyOperationInsertede |  | xcomb.extractcomb.extractt

[dialect-conversion:1] [dialect-conversion:1] r    a    c** Insert  : '** Insert  : 'tcomb.extractcomb.extract"' (' ((0x7e626c003490%0x7e6254002af0)arg0) (was detached)) (was detached)

 <{lowBit = 1 : i32}>[pattern-application PatternApplicator.cpp:40 1]  : Ignoring pattern '([pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] comb.muxi(anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false>' because it is impossible to match or cannot lead to legal IR (by cost model)4 | notifyOperationInserted | notifyOperationInserted
) ->  |  | comb.extracticomb.extract
[pattern-application PatternApplicator.cpp:40 1] 1
[dialect-conversion:1] Ignoring pattern '
[dialect-conversion:1]   [dialect-conversion:1] comb.xor      ' because it is impossible to match or cannot lead to legal IR (by cost model)  ** Insert  : '  
** Insert  : 'comb.extract} -> SUCCESScomb.extract[pattern-application PatternApplicator.cpp:40 1] ' ( : ' (Ignoring pattern '0x7e626c0059900x7e6254004cb0operation marked legal by the targetcomb.xor))
' because it is impossible to match or cannot lead to legal IR (by cost model)[dialect-conversion:1]  (was detached) (was detached)
  

  [pattern-application PatternApplicator.cpp:40 1] //===-------------------------------------------===//
Ignoring pattern 'comb.and' because it is impossible to match or cannot lead to legal IR (by cost model)[dialect-conversion:1] 

[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' [pattern-application PatternApplicator.cpp:40 1] (Ignoring pattern '0x7e6264005b00comb.or) {
' because it is impossible to match or cannot lead to legal IR (by cost model)[dialect-conversion:1] 
      [pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted | notifyOperationInserted[dialect-conversion:1]  |  | %
comb.extractcomb.extract2[dialect-conversion:1] 

 = //===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1] "[dialect-conversion:1]     cLegalizing operation :     o'** Insert  : '** Insert  : 'mhw.modulecomb.extractcomb.extractb' ' (' (.(0x7e6254004d700x7e626c005a50e0x650f954f7150))x) {
 (was detached) (was detached)t
[dialect-conversion:1] 
r  a* Fold {
ct"(%arg0) <{lowBit = [pattern-logging-listener PatternLoggingListener.cpp:10 1] 2[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false> : (anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted | notifyOperationInsertedi |  | 32comb.extractcomb.extract[dialect-conversion:1] }

  >[dialect-conversion:1] [dialect-conversion:1] } -> FAILURE :    :   unable to fold  (  
** Insert  : 'i** Insert  : 'comb.extract4comb.extract' () -> ' (0x7e6254004e30i0x7e626c005b10)1)[dialect-conversion:1]  (was detached) (was detached)
} -> FAILURE : 
no matched legalization pattern
[dialect-conversion:1] 
  [dialect-conversion:1]   //===-------------------------------------------===//
} -> SUCCESS : [dialect-conversion:1] 
[dialect-conversion:1] //===-------------------------------------------===//
[dialect-conversion:1] Legalizing operation : 'operation marked legal by the targetcomb.add
' [dialect-conversion:1] (  0x650f954f72c0  ) {
//===-------------------------------------------===//
[dialect-conversion:1]   [dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' (0x7e6264005bc0) {
[dialect-conversion:1]       [pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted | notifyOperationInserted |  | comb.extractcomb.extract%hw.module

% 3[dialect-conversion:1] @[dialect-conversion:1] 0 =   add   = "    "c** Insert  : '(** Insert  : 'cocomb.extractincomb.extractom' ( ' (mb0x7e626c005ca0%lhs0x7e6254004f30b.) : ).e (was detached) (was detached)aix

d2t, rinda" c(%rhst : "%(arg0i, 2%%, arg1arg0out)) out : i2 {)synth.arch = "BRENT-KUNG"} :  <({lowBit = i3, 3i3 : ) -> [pattern-logging-listener PatternLoggingListener.cpp:10 1]  i(anonymous namespace)::CombAddOpConversion<false>i{...}3 | notifyOperationInserted32 | }comb.extract
' at >
[dialect-conversion:1]  : [dialect-conversion:1]   (  i* Fold {
4loc(  ) -> "** Insert  : 'ciocomb.extract1m' (b0x7e6254005070
-)[dialect-conversion:1] t[dialect-conversion:1]  (was detached)  o[pattern-logging-listener PatternLoggingListener.cpp:10 1]   
} -> FAILURE : -(anonymous namespace)::CombAddOpConversion<false>  aunable to fold | notifyOperationInserted} -> SUCCESSi
 |  : gcomb.extract-
ar[dialect-conversion:1] i  t  hoperation marked legal by the target.** Insert  : '
mcomb.extract[dialect-conversion:1] l' ([dialect-conversion:1]   i0x7e626c005d60
  r)[dialect-conversion:1] //===-------------------------------------------===//
" (was detached)  :
[dialect-conversion:1] * Pattern : '18[pattern-logging-listener PatternLoggingListener.cpp:10 1] 
comb.add:(anonymous namespace)::CombAddOpConversion<false>[dialect-conversion:1]  -> (1 | notifyOperationInserted  )' {
) |   comb.xor
//===-------------------------------------------===//
[pattern-logging-listener PatternLoggingListener.cpp:10 1] 
[pattern-application PatternApplicator.cpp:209 1] [dialect-conversion:1] (anonymous namespace)::CombAddOpConversion<false>[dialect-conversion:1] Trying to match "   | notifyOperationInserted    (anonymous namespace)::CombAddOpConversion<false> |   Legalizing operation : "comb.xor** Insert  : ''
comb.xor
comb.xor' [dialect-conversion:1] ' ((  0x7e62540051300x7e6264005cc0  )) {
** Insert  : ' (was detached)[dialect-conversion:1] comb.xor
  ' (  0x7e626c005e20  ) (was detached)
%[pattern-logging-listener PatternLoggingListener.cpp:10 1] 4[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false> = (anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted" | notifyOperationInserted | c | comb.and[pattern-logging-listener PatternLoggingListener.cpp:10 1] ocomb.and
(anonymous namespace)::CombAddOpConversion<false>[dialect-conversion:1] m
 | notifyOperationInserted  b[dialect-conversion:1]  |   .  [pattern-application PatternApplicator.cpp:40 1] comb.extract** Insert  : 'x  Ignoring pattern '
comb.ando** Insert  : 'comb.mux[dialect-conversion:1] ' (r0x7e6254005280comb.and' because it is impossible to match or cannot lead to legal IR (by cost model)' (  ")
0x7e626c005f70  ( (was detached))** Insert  : '%[pattern-application PatternApplicator.cpp:40 1] 
 (was detached)comb.extract0Ignoring pattern '
' (, comb.xor0x7e625c002c70%' because it is impossible to match or cannot lead to legal IR (by cost model))1
 (was detached), 
[pattern-application PatternApplicator.cpp:40 1] %Ignoring pattern '2comb.xor, ' because it is impossible to match or cannot lead to legal IR (by cost model)%
3)[pattern-application PatternApplicator.cpp:40 1] Ignoring pattern 'comb.and' because it is impossible to match or cannot lead to legal IR (by cost model)
[pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-application PatternApplicator.cpp:40 1]  <(anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false>Ignoring pattern '{ | notifyOperationInserted | notifyOperationInsertedcomb.ortwoState | [pattern-logging-listener PatternLoggingListener.cpp:10 1]  | ' because it is impossible to match or cannot lead to legal IR (by cost model)}comb.xor(anonymous namespace)::CombAddOpConversion<false>comb.xor
>
 | notifyOperationInserted
 : [dialect-conversion:1]  | [dialect-conversion:1] (  comb.extract  [dialect-conversion:1] i  
  
1** Insert  : '[dialect-conversion:1] ** Insert  : '[dialect-conversion:1] , comb.xor  comb.xor//===-------------------------------------------===//
i' (  ' ([dialect-conversion:1] 10x7e62540053e0** Insert  : '0x7e626c0060d0Legalizing operation : , )comb.extract)'i (was detached)' ( (was detached)hw.module1
0x7e625c005110
' , )( (was detached)i0x650f954f39b0
1) {
) -> [dialect-conversion:1] i  1* Fold {

[dialect-conversion:1]     } -> SUCCESS : operation marked legal by the target
[pattern-logging-listener PatternLoggingListener.cpp:10 1] [dialect-conversion:1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>  (anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted[pattern-logging-listener PatternLoggingListener.cpp:10 1]    | notifyOperationInserted | (anonymous namespace)::CombAddOpConversion<false>[dialect-conversion:1] //===-------------------------------------------===//
 | comb.and | notifyOperationInserted  [dialect-conversion:1] comb.and
 | } -> FAILURE :   
[dialect-conversion:1] comb.extractunable to fold} -> SUCCESS[dialect-conversion:1]   

 :     [dialect-conversion:1] pattern applied successfully  ** Insert  : '  [dialect-conversion:1] ** Insert  : 'comb.and  } -> FAILURE : comb.and' (** Insert  : 'no matched legalization pattern' (0x7e626c0061b0comb.extract

0x7e62540054c0)' ([dialect-conversion:1] )[pattern-application PatternApplicator.cpp:54 2]  (was detached)0x7e625c0051d0//===-------------------------------------------===//
 (was detached)[dialect-conversion:1] // *** IR Dump After Pattern Application ***

)

 (was detached)[pattern-logging-listener PatternLoggingListener.cpp:10 1] [dialect-conversion:1] 
(anonymous namespace)::CombAddOpConversion<false>//===-------------------------------------------===//
 | notifyOperationInserted[dialect-conversion:1]  | Legalizing operation : comb.xor'
comb.add[dialect-conversion:1] '   (  0x650f954f3420** Insert  : ') {
comb.xor[dialect-conversion:1] ' (  0x7e626c006290) (was detached)
[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | [pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>comb.xor(anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted
 | notifyOperationInserted | [dialect-conversion:1]  | comb.and  comb.extract%
  
0[dialect-conversion:1] [dialect-conversion:1] ** Insert  : ' =     comb.xor"    ' (c** Insert  : '** Insert  : '0x7e62540055a0ocomb.extractcomb.and)m' (' ( (was detached)b0x7e625c0052900x7e626c006370[pattern-application PatternApplicator.cpp:54 2] 
.))hw.modulea (was detached) (was detached) d

d@"Lower comb.add to Parallel-Prefix of width parity(3
--------------------------------------- Init
%P0[pattern-logging-listener PatternLoggingListener.cpp:10 1] arg00((anonymous namespace)::CombAddOpConversion<false>,  = Ain | notifyOperationInserted%0[pattern-logging-listener PatternLoggingListener.cpp:10 1]   | arg1 XOR B(anonymous namespace)::CombAddOpConversion<false>%arg0comb.and)0 | notifyOperationInserted : 

 |  {i[dialect-conversion:1] G0comb.extractsynth.arch4  0
 = ,    = A[dialect-conversion:1] out"** Insert  : '0   Rcomb.and AND B  outI' (0** Insert  : ' : P0x7e6254005680
comb.extractiP)P0' (1L (was detached)10x7e625c005480)E
 = A)C1 (was detached)A XOR BLower comb.add to Parallel-Prefix of width 
R13R
 
--------------------------------------- Init
YG0"{P01}
[pattern-logging-listener PatternLoggingListener.cpp:10 1] 0 = A : (anonymous namespace)::CombAddOpConversion<false>[pattern-application PatternApplicator.cpp:54 2]  = A1( | notifyOperationInserted  0 AND B | i% XOR B1comb.extract200

,  = 
P0[dialect-conversion:1] icomb.extractG02  2 0 = A  ) -> % = A2** Insert  : 'arg0i0 XOR Bcomb.extract 2 AND B2' (from
0[dialect-conversion:1] 
0x7e625c005540 
  G0)0P0* Fold {
2 (was detached)1 = A 
 = A2:[dialect-conversion:1] 1 AND B    XOR B2[pattern-logging-listener PatternLoggingListener.cpp:10 1] (} -> FAILURE : 1
(anonymous namespace)::CombAddOpConversion<false>iunable to fold
 | notifyOperationInserted4
G0[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | )1(anonymous namespace)::CombAddOpConversion<false>comb.xor -> [dialect-conversion:1]  = A | notifyOperationInserted
 | i
1[dialect-conversion:1] comb.and1[dialect-conversion:1]  AND B  

  1  [dialect-conversion:1] [pattern-application PatternApplicator.cpp:54 2] * Pattern : '
** Insert  : '    comb.add%P0comb.xor   -> (12' (** Insert  : ')' {
 =  = A0x7e625c005600comb.andcomb.extract[pattern-application PatternApplicator.cpp:209 1] 2)' ( Trying to match " XOR B (was detached)0x7e626c0068e0%(anonymous namespace)::CombAddOpConversion<false>2
)arg0"
 (was detached) 
G0[pattern-logging-listener PatternLoggingListener.cpp:10 1] 
from2(anonymous namespace)::CombAddOpConversion<false>  = A[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | notifyOperationInserted12(anonymous namespace)::CombAddOpConversion<false> |  AND B | notifyOperationInserted  | comb.and2:comb.or

 
[dialect-conversion:1] ([dialect-conversion:1]   i    4  ** Insert  : ')** Insert  : 'comb.and -> comb.or' ([pattern-logging-listener PatternLoggingListener.cpp:10 1] ' (i0x7e625c0056e0(anonymous namespace)::CombAddOpConversion<false>0x7e626c0069c01)
 | notifyOperationInserted) (was detached)[pattern-application PatternApplicator.cpp:54 2] [pattern-logging-listener PatternLoggingListener.cpp:10 1]  |  (was detached)

  (anonymous namespace)::CombAddOpConversion<false>comb.extract% | notifyOperationInserted
[pattern-logging-listener PatternLoggingListener.cpp:10 1] 2[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | [dialect-conversion:1] (anonymous namespace)::CombAddOpConversion<false> = (anonymous namespace)::CombAddOpConversion<false>comb.extractcomb.and   | notifyOperationInserted | notifyOperationInserted 
   |  | %[dialect-conversion:1] ** Insert  : 'comb.andcomb.xorarg0  comb.extract

   ' ([dialect-conversion:1] [dialect-conversion:1] from** Insert  : '0x7e62680028a0     comb.and)    2' ( (was detached)** Insert  : ' ** Insert  : '0x7e6254005760
comb.and:comb.xor)' ( ' (( (was detached)0x7e626c006b800x7e625c005840i
))4 (was detached) (was detached))

 -> i1[pattern-logging-listener PatternLoggingListener.cpp:10 1] 
[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>[pattern-application PatternApplicator.cpp:54 2] (anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted   | notifyOperationInserted[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | % | [pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>comb.extract3comb.and(anonymous namespace)::CombAddOpConversion<false> | notifyOperationInserted
 = 
 | notifyOperationInserted | [dialect-conversion:1] comb.extract[dialect-conversion:1]  | comb.and     comb.or
  %  
[dialect-conversion:1] ** Insert  : 'arg0** Insert  : '[dialect-conversion:1]   comb.extract comb.and    ' (from' (  ** Insert  : '0x7e6268004d00 0x7e626c006c603** Insert  : 'comb.and))comb.or' (  (was detached) (was detached)' (0x7e625c005920:

0x7e6254005cb0) ) (was detached)([pattern-logging-listener PatternLoggingListener.cpp:10 1]  (was detached)
i(anonymous namespace)::CombAddOpConversion<false>
4 | notifyOperationInserted) |  -> [pattern-logging-listener PatternLoggingListener.cpp:10 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] comb.ori(anonymous namespace)::CombAddOpConversion<false>(anonymous namespace)::CombAddOpConversion<false>
1 | notifyOperationInserted
 | notifyOperationInserted[dialect-conversion:1]  | [pattern-application PatternApplicator.cpp:54 2]  |   comb.extract  comb.xor  
[pattern-logging-listener PatternLoggingListener.cpp:10 1] %
** Insert  : '[dialect-conversion:1] comb.or(anonymous namespace)::CombAddOpConversion<false>4[dialect-conversion:1]   ' ( | notifyOperationInserted =     0x7e626c006e40 |   comb.xor** Insert  : ')comb.and** Insert  : 'comb.extract  (was detached)
comb.xor' (bin
[dialect-conversion:1] ' (0x7e6268004dc0   0x7e625c005a00)[pattern-logging-listener PatternLoggingListener.cpp:10 1] %  ) (was detached)(anonymous namespace)::CombAddOpConversion<false>0** Insert  : ' (was detached)
 | notifyOperationInserted, comb.and
 | %' (comb.and10x7e6254005e70
, )[dialect-conversion:1] [pattern-logging-listener PatternLoggingListener.cpp:10 1] %[pattern-logging-listener PatternLoggingListener.cpp:10 1]  (was detached)  (anonymous namespace)::CombAddOpConversion<false>  2(anonymous namespace)::CombAddOpConversion<false>
 | notifyOperationInserted** Insert  : ',  | notifyOperationInserted | comb.and% | comb.and' (3comb.extract
0x7e626c006f20
[dialect-conversion:1] )[dialect-conversion:1]     (was detached)    :
[pattern-logging-listener PatternLoggingListener.cpp:10 1]   ** Insert  : ' (anonymous namespace)::CombAddOpConversion<false>** Insert  : 'comb.and[pattern-logging-listener PatternLoggingListener.cpp:10 1] i | notifyOperationInsertedcomb.extract' ((anonymous namespace)::CombAddOpConversion<false>1 | ' (0x7e625c005ae0 | notifyOperationInserted
comb.and0x7e6268004e80) | [pattern-application PatternApplicator.cpp:54 2] 
) (was detached)comb.and  [dialect-conversion:1]  (was detached)

%  
[dialect-conversion:1] 5Lower comb.add to Parallel-Prefix of width      = 3** Insert  : '  comb.parity
--------------------------------------- Init
 comb.and** Insert  : '[pattern-logging-listener PatternLoggingListener.cpp:10 1] P0%' (comb.and(anonymous namespace)::CombAddOpConversion<false>0arg00x7e6254005f50' ( | notifyOperationInserted = A )0x7e626c007000 | 0: (was detached))comb.xor XOR B 
 (was detached)
0i
[dialect-conversion:1] 
4  G0
  0[pattern-application PatternApplicator.cpp:54 2] [pattern-logging-listener PatternLoggingListener.cpp:10 1] ** Insert  : ' = A  (anonymous namespace)::CombAddOpConversion<false>comb.xor0hw.output | notifyOperationInserted ' (% AND B[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | 0x7e626800507050(anonymous namespace)::CombAddOpConversion<false>comb.or) 
 | notifyOperationInserted
 (was detached):P0 | [dialect-conversion:1] 
 1comb.or   = Ai
  11[dialect-conversion:1] ** Insert  : ' XOR B
  [pattern-logging-listener PatternLoggingListener.cpp:10 1] comb.or1
[pattern-application PatternApplicator.cpp:54 2]   (anonymous namespace)::CombAddOpConversion<false>' (G0}** Insert  : ' | notifyOperationInserted0x7e626c0070e01comb.or | ) = A
' (comb.and (was detached)1
0x7e6254006130

 AND B[dialect-conversion:1] )[dialect-conversion:1] 1[pattern-logging-listener PatternLoggingListener.cpp:10 1] } -> SUCCESS (was detached)  
(anonymous namespace)::CombAddOpConversion<false>

  P0 | notifyOperationInserted[dialect-conversion:1] ** Insert  : '2 | //===-------------------------------------------===//
comb.and = A[dialect-conversion:1] comb.and' (2

0x7e6268005150 XOR B[dialect-conversion:1] [dialect-conversion:1] )2//===-------------------------------------------===//
  [pattern-logging-listener PatternLoggingListener.cpp:10 1]  (was detached)
[dialect-conversion:1]   (anonymous namespace)::CombAddOpConversion<false>
G0Legalizing operation : ** Insert  : ''comb.and | notifyOperationInserted2hw.output' ( |  = A' 0x7e626c0071c0[pattern-logging-listener PatternLoggingListener.cpp:10 1] comb.and2()(anonymous namespace)::CombAddOpConversion<false>
 AND B[dialect-conversion:1] 0x650f954ef960 (was detached) | notifyOperationInserted2  ) {

 | 
--------------------------------------- Kogge-Stone Stage   [dialect-conversion:1] comb.xor0** Insert  : '  

comb.and[pattern-logging-listener PatternLoggingListener.cpp:10 1] [dialect-conversion:1] G' ((anonymous namespace)::CombAddOpConversion<false>  10x7e6254006210 | notifyOperationInserted  1)" | ** Insert  : ' = G (was detached)hcomb.andcomb.xor1
w
' (0.[dialect-conversion:1] 0x7e6268005230 OR (Po--------------------------------------- Sklanskey Stage   )1u0   (was detached)0t
** Insert  : '
 AND GpGLower comb.add to Ripple-Carry Adder of width comb.and0u12' (0t1
0x7e625c005bc0)
" = G)P(1 (was detached)1%0
15 OR (P = P)10[pattern-logging-listener PatternLoggingListener.cpp:10 1]  AND P(anonymous namespace)::CombAddOpConversion<false> : 0( | notifyOperationInserted0 | i
comb.concatG
1[pattern-logging-listener PatternLoggingListener.cpp:10 1] 2[dialect-conversion:1] 1) -> (anonymous namespace)::CombAddOpConversion<false>1  (0 | notifyOperationInserted = G  ) AND G | 2** Insert  : '0comb.or
0comb.concat' (0
 OR (P[dialect-conversion:1] 0x7e62680057a0)
[dialect-conversion:1] 2  )P  0* Fold {
 (was detached)1   AND G
1** Insert  : '1 = P[dialect-conversion:1] comb.or[dialect-conversion:1] 01  ' (  )
0} -> FAILURE : 0x7e625c0060f0  P AND P)unable to fold** Replace : '20 (was detached)
comb.add10
'( = P[dialect-conversion:1] 
0x650f954f34202} -> FAILURE : --------------------------------------- Sklanskey Stage )
0no matched legalization pattern[pattern-logging-listener PatternLoggingListener.cpp:10 1] 1 AND P
(anonymous namespace)::CombAddOpConversion<false>
1[dialect-conversion:1]  | notifyOperationInsertedG0//===-------------------------------------------===//
 | 2
comb.and[pattern-application PatternApplicator.cpp:224 1] 2--------------------------------------- Kogge-Stone Stage 
 -> matchAndRewrite  = G1[dialect-conversion:1] successful2
  
1G   OR (P2** Insert  : '[dialect-conversion:1] 22comb.and
1 = G' ([dialect-conversion:1]  AND G20x7e625c0062b0  11)  1 OR (P (was detached)//===-------------------------------------------===//
)
2
[dialect-conversion:1] P1  2 AND G  20Legalizing operation :  = P[pattern-logging-listener PatternLoggingListener.cpp:10 1] 1'2(anonymous namespace)::CombAddOpConversion<false>)
comb.extract1 | notifyOperationInsertedP'  AND P | 2(1comb.and20x7e62680028a01
 = P) {

[dialect-conversion:1] 2[dialect-conversion:1]   1     AND P  ** Insert  : '0  comb.and1' (
0x7e625c006390) (was detached)
[pattern-logging-listener PatternLoggingListener.cpp:10 1] (anonymous namespace)::CombAddOpConversion<false>[pass-manager Pass.cpp:549 1] [pattern-logging-listener PatternLoggingListener.cpp:10 1]  | notifyOperationInsertedRunning pass '(anonymous namespace)::CombAddOpConversion<false>[pattern-logging-listener PatternLoggingListener.cpp:10 1]  | CSE | notifyOperationInserted(anonymous namespace)::CombAddOpConversion<false>comb.xor' on operation ' |  | notifyOperationInserted
comb.xor | [dialect-conversion:1] 
comb.or  [dialect-conversion:1] 
%    [dialect-conversion:1] 0** Insert  : '     = comb.xor** Insert  : '  "' (comb.xor** Insert  : 'c0x7e62540062f0' (comb.oro)0x7e626c007d10' (m (was detached))0x7e625c006570b
 (was detached)).
 (was detached)e
xtracthw.module[pattern-logging-listener PatternLoggingListener.cpp:10 1] " (anonymous namespace)::CombAddOpConversion<false>( | notifyOperationInserted@ | parity%[pattern-logging-listener PatternLoggingListener.cpp:10 1] comb.xor[pattern-logging-listener PatternLoggingListener.cpp:10 1] arg0(anonymous namespace)::CombAddOpConversion<false>
((anonymous namespace)::CombAddOpConversion<false>) | notifyOperationInserted[dialect-conversion:1] in | notifyOperationInserted  |    | %arg0comb.and   <comb.xor : 
** Insert  : '{
[dialect-conversion:1] comb.xorilowBit[dialect-conversion:1]   ' (4 =     0x7e626c007dc0, 0   : ** Insert  : ')out** Insert  : 'comb.and (was detached) icomb.xor' (
out32' (0x7e625c006650 : }0x7e62540063d0)i>) (was detached)1 :  (was detached)
)([pattern-logging-listener PatternLoggingListener.cpp:10 1] --------------------------------------- Brent-Kung FW 
(anonymous namespace)::CombAddOpConversion<false>i0 | notifyOperationInserted2 : Stride  | ) -> 1comb.concat

iG[dialect-conversion:1]  11  {...}1   = G** Insert  : '1comb.concat
0' at ' ([dialect-conversion:1]  OR (P0x7e626c0082e0  1)  0 (was detached)} -> SUCCESS AND G
 : loc(0[dialect-conversion:1] 0  ")
  coperation marked legal by the targetP** Replace : 'o
1comb.addm[dialect-conversion:1] 1'([pattern-logging-listener PatternLoggingListener.cpp:10 1] b   = P0x650f954f6750(anonymous namespace)::CombAddOpConversion<false>-  1)
 | notifyOperationInsertedt//===-------------------------------------------===//
0 | o AND P[dialect-conversion:1] comb.concat-0
--------------------------------------- Completion
[dialect-conversion:1] 
a0RES0 = P0
  [dialect-conversion:1] i
RES    g--------------------------------------- Brent-Kung FW 1//===-------------------------------------------===//
  -1 = P[dialect-conversion:1] ** Insert  : 'a : Stride 1  comb.concatr2 XOR G  ' (i
0Legalizing operation : 0x7e62540065c0t--------------------------------------- Brent-Kung BW 
')h0REScomb.extract (was detached). : Stride 2' 
m1 = P(l
20x7e6268004d00iG XOR G) {
[dialect-conversion:1] r21[dialect-conversion:1]   "1
     = G:  [pattern-application PatternApplicator.cpp:224 1] ** Replace : '26   -> matchAndRewrite comb.add0:successful'( OR (P1
0x650f954f52a02))
0[dialect-conversion:1] 
 AND G
1[dialect-conversion:1] 0  )
  P//===-------------------------------------------===//
2[dialect-conversion:1] 1   = P  2Legalizing operation : 0'% AND Pcomb.extract11'  = 0("
0x7e626c003490c) {
o[dialect-conversion:1] --------------------------------------- Completion
m  RES0 = P0
b.  RES[pattern-logging-listener PatternLoggingListener.cpp:10 1] e  1(anonymous namespace)::CombAddOpConversion<false>x = P | notifyOperationInsertedt1 | rcomb.xor XOR Ga
0c[dialect-conversion:1] 
t  RES"  2(** Insert  : ' = P%comb.xor2%arg0' ( XOR G0)0x7e625c0067301 = )
" (was detached) <c
o{m[pattern-application PatternApplicator.cpp:224 1] lowBitb =  -> matchAndRewrite .successful[pattern-logging-listener PatternLoggingListener.cpp:10 1] 1e
(anonymous namespace)::CombAddOpConversion<false> : x | notifyOperationInsertedt | rcomb.xoria
32c[dialect-conversion:1] [dialect-conversion:1] }t  
>[dialect-conversion:1] "   :   (** Insert  : '%(  comb.xorarg0//===-------------------------------------------===//
i' ()[dialect-conversion:1] 20x7e625c006810) ->   )i   < (was detached)1Legalizing operation : 
{'lowBitcomb.extract
 = ' ([dialect-conversion:1] 00x7e6254002af0   : ) {
  [dialect-conversion:1] } -> SUCCESSi   : 32  }  [pattern-logging-listener PatternLoggingListener.cpp:10 1] >operation marked legal by the target(anonymous namespace)::CombAddOpConversion<false> : 
 | notifyOperationInserted([dialect-conversion:1]  |   icomb.concat  3
//===-------------------------------------------===//
) -> [dialect-conversion:1]     [dialect-conversion:1] i** Insert  : '
1comb.concat[dialect-conversion:1] ' (  0x7e625c006950  )//===-------------------------------------------===//
 (was detached)[dialect-conversion:1] 
  
  Legalizing operation : [dialect-conversion:1] [dialect-conversion:1] '    comb.extract    ' } -> SUCCESS** Replace : '( : comb.add0x7e6268004dc0'() {
0x650f954f72c0[dialect-conversion:1] )
  operation marked legal by the target  
  [dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' (0x7e626c005990) {
[dialect-conversion:1]       --------------------------------------- Completion
RES0 = P0
RES1 = P1 XOR G0
RES2 = P2 XOR G1
[pattern-application PatternApplicator.cpp:224 1]  -> matchAndRewrite successful
%%[dialect-conversion:1] 02
% =  = "[dialect-conversion:1] 1"c   = co  "om//===-------------------------------------------===//
cmb[dialect-conversion:1] ob.  m.e  bexLegalizing operation : .xt'etrcomb.extractxra' tac(rct0x7e625c002c70at") {
c"([dialect-conversion:1] t(%%  arg1"arg0  )()  %arg0) <{lowBit < = 0 : i <{32{}lowBit>lowBit :  =  = (10i : %20 : ) -> i = 32"}ic>1oim : 32}> : (i3) -> i1
[dialect-conversion:1] b    } -> SUCCESS. : extract"(%arg0operation marked legal by the target)
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation :  <'comb.extract{' (lowBit0x7e6254004cb0 = 
) {
0[dialect-conversion:1]  :   [dialect-conversion:1] i    32    }} -> SUCCESS> :  : ((operation marked legal by the target
[dialect-conversion:1]   i  3//===-------------------------------------------===//
) -> i3[dialect-conversion:1] ) -> 
i[dialect-conversion:1] 1  i  1//===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' (0x7e6268004e80) {


[dialect-conversion:1]       [dialect-conversion:1] [dialect-conversion:1]         } -> SUCCESS} -> SUCCESS :  : operation marked legal by the targetoperation marked legal by the target

[dialect-conversion:1] [dialect-conversion:1]         //===-------------------------------------------===//
//===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1] 

[dialect-conversion:1] [dialect-conversion:1]         %//===-------------------------------------------===//
//===-------------------------------------------===//
1[dialect-conversion:1] [dialect-conversion:1]  =     "    cLegalizing operation : Legalizing operation : o'%'mcomb.extract3comb.extractb'  = ' ".((ce0x7e625c0051100x7e626c005a50ox) {
) {
mt[dialect-conversion:1] [dialect-conversion:1] br    .a    ec    xtt"r(act"%(arg0)%arg1) < <%{%1{lowBit2 = lowBit" =  =  = c1"o1cm : ob : m.ibe32.xi}32et>}xr : >ta(rc : i(at2c") -> t(i%"arg0i3()1) -> %arg0)i
1[dialect-conversion:1]    < <  } -> SUCCESS : {{
lowBitoperation marked legal by the targetlowBit = 
 = [dialect-conversion:1] [dialect-conversion:1] 1  2     :  :   } -> SUCCESS//===-------------------------------------------===//
ii : [dialect-conversion:1] 3232
}}[dialect-conversion:1] >>  operation marked legal by the target :    : 
(//===-------------------------------------------===//
([dialect-conversion:1] [dialect-conversion:1] i  i  3  3  ) -> //===-------------------------------------------===//
) -> Legalizing operation : i'[dialect-conversion:1] 1icomb.xor
1' [dialect-conversion:1] (
0x7e6268005070
  [dialect-conversion:1] ) {
  [dialect-conversion:1]   [dialect-conversion:1] //===-------------------------------------------===//
      [dialect-conversion:1]   } -> SUCCESS    } -> SUCCESS :      : Legalizing operation : operation marked legal by the target'
operation marked legal by the targetcomb.extract[dialect-conversion:1] 
'   [dialect-conversion:1] (    0x7e6254004d70//===-------------------------------------------===//
  ) {
//===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1] 
[dialect-conversion:1]   [dialect-conversion:1] 
%    [dialect-conversion:1] 4       = //===-------------------------------------------===//
  "[dialect-conversion:1] //===-------------------------------------------===//
c  [dialect-conversion:1] o    mLegalizing operation :   b'Legalizing operation : .comb.extract'x' comb.extracto(' r0x7e625c0051d0(") {
0x7e626c005b10([dialect-conversion:1] ) {
  %[dialect-conversion:1]   0    ,   %  2) <{twoState}>% : 2( = "cio1m%, b%2.i3 = e1 = "x) -> "ctcoirom1ambcb.
t.e[dialect-conversion:1] "ex  (xt  tr%} -> SUCCESSra : arg0acoperation marked legal by the target)ct
t"[dialect-conversion:1] "(  (  %//===-------------------------------------------===//
arg0%)arg1[dialect-conversion:1] )
[dialect-conversion:1]    <  //===-------------------------------------------===//
[dialect-conversion:1]   { < <  lowBit{Legalizing operation : { = 'lowBitlowBitcomb.and =  = 2' 20 :  : ( : 0x7e6268005150) {
[dialect-conversion:1] i  ii32  3232}  }}>>> :  : (( : (ii33) -> ) -> iii311) -> %
i
5[dialect-conversion:1] [dialect-conversion:1] 1 =     "    c} -> SUCCESS} -> SUCCESSo :  : m
operation marked legal by the targetboperation marked legal by the target
.[dialect-conversion:1] 
[dialect-conversion:1] a  [dialect-conversion:1]   n      d} -> SUCCESS  //===-------------------------------------------===//
" : //===-------------------------------------------===//
[dialect-conversion:1] (
[dialect-conversion:1] [dialect-conversion:1] %
  operation marked legal by the target0
[dialect-conversion:1]   , [dialect-conversion:1]   //===-------------------------------------------===//
%    [dialect-conversion:1] 2  //===-------------------------------------------===//
  )//===-------------------------------------------===//
[dialect-conversion:1]     [dialect-conversion:1] Legalizing operation :   
' <Legalizing operation : [dialect-conversion:1] comb.extract'{  ' comb.extracttwoState  (' }//===-------------------------------------------===//
0x7e625c005290(>[dialect-conversion:1] ) {
0x7e626c005ca0 :   [dialect-conversion:1] ) {
(    [dialect-conversion:1] Legalizing operation :   i  '  1  comb.extract,   ' i(10x7e6254004e30) -> ) {
[dialect-conversion:1]   i  %3 = "c%o4m =   b".ceoxmtbr.aecxtt"r(ac%targ1")(%arg1) <{ <%lowBit3{ =  = lowBit"0 = c : o1mb : i.32ei}x>32t : }r(>ac : it(3") -> (i%3iarg1) -> 1)i1
[dialect-conversion:1] 
 <    [dialect-conversion:1] } -> SUCCESS{   : lowBit   = } -> SUCCESS : operation marked legal by the target0
[dialect-conversion:1]   operation marked legal by the target : 
  [dialect-conversion:1] //===-------------------------------------------===//
  i  [dialect-conversion:1] 32//===-------------------------------------------===//

}[dialect-conversion:1] [dialect-conversion:1] >
  [dialect-conversion:1]  :     (//===-------------------------------------------===//
  [dialect-conversion:1] //===-------------------------------------------===//
i  [dialect-conversion:1] 3    ) -> Legalizing operation :   'Legalizing operation : icomb.extract'1' comb.extract(' 0x7e625c005480() {
0x7e626c005d60[dialect-conversion:1] 
) {
  [dialect-conversion:1]     [dialect-conversion:1]           } -> SUCCESS : operation marked legal by the target
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.extract' (0x7e6254004f30) {
[dialect-conversion:1]       %4 = %"5c = o"mcbo%.m4eb = x."tecrxoatmcrbta."ce(tx%"targ1(r)%aarg1c)t"(%arg1 <){ <lowBit = { <lowBit1{ = lowBit :  = 21 : i : 32}ii>3232 : }}(>> :  : i((3) -> ii33i) -> ) -> 1i1i1

[dialect-conversion:1]   
  [dialect-conversion:1] } -> SUCCESS[dialect-conversion:1]    :       } -> SUCCESSoperation marked legal by the target} -> SUCCESS : 
 : [dialect-conversion:1]     operation marked legal by the target//===-------------------------------------------===//
operation marked legal by the target
[dialect-conversion:1] 
[dialect-conversion:1] 
[dialect-conversion:1]   [dialect-conversion:1]         //===-------------------------------------------===//
  //===-------------------------------------------===//
//===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1] [dialect-conversion:1] 

  [dialect-conversion:1] [dialect-conversion:1]       Legalizing operation :     '//===-------------------------------------------===//
//===-------------------------------------------===//
comb.extract[dialect-conversion:1] [dialect-conversion:1] '     (  0x7e6254005070  Legalizing operation : ) {
Legalizing operation : '[dialect-conversion:1] 'comb.extract  comb.xor'   ' (  (0x7e625c0055400x7e626c005e20) {
) {
[dialect-conversion:1] [dialect-conversion:1]             %5 = "comb.extract"(%arg1) <{lowBit = 2 : i%325%} = 6>" =  : c"(ocmiob3m.) -> be.ixx1torra"c
(t[dialect-conversion:1] %"  0(  , %} -> SUCCESS%arg1 : 3))operation marked legal by the target
[dialect-conversion:1]    :   (//===-------------------------------------------===//
[dialect-conversion:1]  <
i[dialect-conversion:1] {1  lowBit,    = //===-------------------------------------------===//
i[dialect-conversion:1] 12  ) ->    : Legalizing operation : 'icomb.xor1i' 32(}0x7e6254005130>) {

 : [dialect-conversion:1] ([dialect-conversion:1]       i    3} -> SUCCESS) ->  : i1operation marked legal by the target
[dialect-conversion:1]     //===-------------------------------------------===//

[dialect-conversion:1] 
[dialect-conversion:1] [dialect-conversion:1]         //===-------------------------------------------===//
} -> SUCCESS%[dialect-conversion:1]  : 6   =   "Legalizing operation : operation marked legal by the targetc'
ocomb.and[dialect-conversion:1] m'   b(  .0x7e626c005f70//===-------------------------------------------===//
x) {
o[dialect-conversion:1] [dialect-conversion:1] r
  "[dialect-conversion:1]   (    %  0//===-------------------------------------------===//
, [dialect-conversion:1] %  3  )Legalizing operation : 'comb.xor : ' ((0x7e625c005600i) {
1[dialect-conversion:1] ,     i  1) -> i1
[dialect-conversion:1]     } -> SUCCESS : operation marked legal by the target%
7[dialect-conversion:1]  =   "  c//===-------------------------------------------===//
om[dialect-conversion:1] b
.[dialect-conversion:1] a  n  d//===-------------------------------------------===//
"[dialect-conversion:1] (%  %6  0 = Legalizing operation : , "'%ccomb.and3o' )m(b : 0x7e6254005280.() {
x[dialect-conversion:1] o  ri  "1  (, %0, i%13) -> )i : 1(i
1%, [dialect-conversion:1] 7   = i  "1} -> SUCCESSc) ->  : ombi.1operation marked legal by the targeta
n[dialect-conversion:1] d  
"  (//===-------------------------------------------===//
[dialect-conversion:1] %  [dialect-conversion:1] 0  
, } -> SUCCESS[dialect-conversion:1] % :   3  )//===-------------------------------------------===//
operation marked legal by the target[dialect-conversion:1]  : 
  ([dialect-conversion:1]     Legalizing operation : i  '1//===-------------------------------------------===//
comb.xor, ' [dialect-conversion:1] (i
0x7e626c0060d01[dialect-conversion:1] ) {
) ->   [dialect-conversion:1] i    1//===-------------------------------------------===//
  [dialect-conversion:1]     
  [dialect-conversion:1] Legalizing operation :   '  comb.and} -> SUCCESS'  : (0x7e625c0056e0) {
operation marked legal by the target[dialect-conversion:1] 
  [dialect-conversion:1]         //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.xor' (0x7e62540053e0) {
[dialect-conversion:1]       %8 = "comb.xor"(%1, %4)%8% :  = 7(" = c"oicm1ob, m.bxi.o1ar) -> n"d(i"%1(1, %%04
, )%[dialect-conversion:1]  : 3  ()  i} -> SUCCESS : 1 : (, ioperation marked legal by the target1
i) -> [dialect-conversion:1] 1  i,   1//===-------------------------------------------===//
i1[dialect-conversion:1] ) -> 

[dialect-conversion:1]   [dialect-conversion:1] i    1//===-------------------------------------------===//
  [dialect-conversion:1] } -> SUCCESS   :   
Legalizing operation : operation marked legal by the target'[dialect-conversion:1] 
comb.and  [dialect-conversion:1] '     (} -> SUCCESS  0x7e626c0061b0 : //===-------------------------------------------===//
) {
[dialect-conversion:1] [dialect-conversion:1] 
operation marked legal by the target  [dialect-conversion:1] 
    [dialect-conversion:1]       //===-------------------------------------------===//
  [dialect-conversion:1] //===-------------------------------------------===//
    [dialect-conversion:1] Legalizing operation : 
'[dialect-conversion:1] comb.and  '   (//===-------------------------------------------===//
0x7e62540054c0[dialect-conversion:1] ) {
  [dialect-conversion:1]     Legalizing operation :   '  comb.xor' (0x7e625c005840) {
[dialect-conversion:1]       1%9 = "c
o%m9[dialect-conversion:1] b =   ."  ac} -> SUCCESSno : dm"b(.operation marked legal by the targeta%
%n1[dialect-conversion:1] 8d,   % = "  4"(//===-------------------------------------------===//
)c%[dialect-conversion:1] o : 1
m(, [dialect-conversion:1] b%  .4i  x)1//===-------------------------------------------===//
o,  : [dialect-conversion:1] r(  i"  i1(Legalizing operation : 1) -> '%, comb.xor1i' i, 1(1%0x7e6268005230) -> 4) {
)
i[dialect-conversion:1]  : 1  [dialect-conversion:1] (      
  i} -> SUCCESS[dialect-conversion:1] 1 :   ,   } -> SUCCESS : operation marked legal by the targetioperation marked legal by the target
1
[dialect-conversion:1] ) -> [dialect-conversion:1]         i//===-------------------------------------------===//
//===-------------------------------------------===//
1[dialect-conversion:1] [dialect-conversion:1] 

[dialect-conversion:1] [dialect-conversion:1]       
  //===-------------------------------------------===//
//===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1] [dialect-conversion:1]       %      6Legalizing operation : } -> SUCCESSLegalizing operation :  = ' : '"comb.xorcomb.xorc' ' operation marked legal by the targeto((
m0x7e62540055a00x7e626c006290[dialect-conversion:1] b) {
) {
  .[dialect-conversion:1] [dialect-conversion:1]   x    //===-------------------------------------------===//
o    r[dialect-conversion:1]     "
([dialect-conversion:1]   %  1//===-------------------------------------------===//
, [dialect-conversion:1]   %  3Legalizing operation : , '%comb.and5' )(0x7e625c005920) {
[dialect-conversion:1] %  10   =   "com <b.{xortwoState"}(%>%10 : 2 = (, "%c5o)im : 1b(, .xio1ir, 1"i, %(19i) -> % = 12i") -> , 1c%oi5m
1)b[dialect-conversion:1] . :   a(  n
} -> SUCCESSd : i"[dialect-conversion:1] 1operation marked legal by the target, (  
i  %[dialect-conversion:1] 1} -> SUCCESS1  ) ->  : ,   %i//===-------------------------------------------===//
operation marked legal by the target41[dialect-conversion:1] 
)
[dialect-conversion:1] [dialect-conversion:1]  :     
(    [dialect-conversion:1] //===-------------------------------------------===//
//===-------------------------------------------===//
  [dialect-conversion:1] i[dialect-conversion:1]   
1  } -> SUCCESS[dialect-conversion:1] ,    :   Legalizing operation : i  '1//===-------------------------------------------===//
operation marked legal by the targetcomb.and) -> [dialect-conversion:1] 
'   [dialect-conversion:1] i(    10x7e6254005680Legalizing operation :   ) {
'//===-------------------------------------------===//
[dialect-conversion:1] 
comb.concat  [dialect-conversion:1] ' [dialect-conversion:1]   
(    [dialect-conversion:1] 0x7e62680057a0    ) {
} -> SUCCESS  [dialect-conversion:1]  : //===-------------------------------------------===//
  [dialect-conversion:1]       operation marked legal by the target  
Legalizing operation : [dialect-conversion:1] '  comb.and  ' //===-------------------------------------------===//
(%0x7e626c006370[dialect-conversion:1] 11) {

 = [dialect-conversion:1] [dialect-conversion:1] "    c    o  //===-------------------------------------------===//
m[dialect-conversion:1] b  .  aLegalizing operation : n'dcomb.xor%"' 7(( = %0x7e625c005a00"2) {
c, [dialect-conversion:1] o%  m5  b)  . : c(oncait1%", 11( = i%"16c) -> , o%mi4b1).a : n(
d"[dialect-conversion:1] (  %i  %101} -> SUCCESS2 = ,  : , "%icoperation marked legal by the target51o
)) -> m[dialect-conversion:1] b :   .i(  x2//===-------------------------------------------===//
o[dialect-conversion:1] ri
"
1[dialect-conversion:1] (,   [dialect-conversion:1] %    i2//===-------------------------------------------===//
  1, [dialect-conversion:1] } -> SUCCESS) -> %   : 5  i)Legalizing operation : operation marked legal by the target1' : 
comb.and([dialect-conversion:1] '   
(  0x7e6254005760i//===-------------------------------------------===//
[dialect-conversion:1] ) {
1[dialect-conversion:1]   [dialect-conversion:1] ,       } -> SUCCESS} -> SUCCESSi   :  : 1  pattern applied successfully) -> 
operation marked legal by the target
i[dialect-conversion:1] 1    //===-------------------------------------------===//
[pattern-application PatternApplicator.cpp:54 2] [dialect-conversion:1] // *** IR Dump After Pattern Application ***


[dialect-conversion:1]     [dialect-conversion:1] //===-------------------------------------------===//
%  [dialect-conversion:1] 12     = } -> SUCCESS  " : Legalizing operation : c'ocomb.andm' operation marked legal by the targetb(
.0x7e626c0068e0[dialect-conversion:1] a) {
  n[dialect-conversion:1]   d  //===-------------------------------------------===//
"  ([dialect-conversion:1]   %
8[dialect-conversion:1] ,   %  7//===-------------------------------------------===//
)[dialect-conversion:1]    :   (Legalizing operation : 'icomb.and1' , (0x7e625c005ae0i) {
1[dialect-conversion:1] ) ->     i  1
[dialect-conversion:1]     } -> SUCCESS : %operation marked legal by the target12
 = [dialect-conversion:1] "  c  o//===-------------------------------------------===//
m[dialect-conversion:1] b
.[dialect-conversion:1] a  n  d//===-------------------------------------------===//
"[dialect-conversion:1] (    %Legalizing operation : %8'11, comb.or% = ' 7"()c0x7e6254005cb0o) {
 : m[dialect-conversion:1] (b  .  a  nid1", (%i21, ) -> %5)i1 : (%
i131[dialect-conversion:1]  = ,   "  ci} -> SUCCESSo1 : m) -> b.oroperation marked legal by the targeti"
1([dialect-conversion:1] %  9  , //===-------------------------------------------===//

%[dialect-conversion:1] 12
[dialect-conversion:1] )[dialect-conversion:1]        :   } -> SUCCESS(//===-------------------------------------------===//
 : [dialect-conversion:1] i  1  operation marked legal by the target, Legalizing operation : 
'i[dialect-conversion:1] comb.or1  ' ) ->   (//===-------------------------------------------===//
i0x7e626c0069c01[dialect-conversion:1] ) {

[dialect-conversion:1] [dialect-conversion:1]   
      [dialect-conversion:1]   //===-------------------------------------------===//
[pattern-application PatternApplicator.cpp:54 2]   [dialect-conversion:1] hw.module     } -> SUCCESS   : @Legalizing operation : addoperation marked legal by the target'
comb.and[dialect-conversion:1] '   (  (0x7e625c005bc0//===-------------------------------------------===//
) {
in[dialect-conversion:1] [dialect-conversion:1] 
  [dialect-conversion:1]      %lhs     : //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : %i'132comb.and = , ' "in(c0x7e6254005e70 o) {
%rhsm[dialect-conversion:1]  : b  .  oi  %r212, " = out(" c%outo9 : m, bi%.212%a))14n = d : ""(c(om%b8i., 1a%, n7di)"1() ->  : %( 8i{, 1i
%16, )
[pattern-application PatternApplicator.cpp:54 2]  : i  [dialect-conversion:1] (1  %) -> i  01} -> SUCCESSi = ,  : 1icomb.extract1 operation marked legal by the target) -> 
%
[dialect-conversion:1] ilhs  [dialect-conversion:1] 1     from//===-------------------------------------------===//
   [dialect-conversion:1] 
} -> SUCCESS
 : [dialect-conversion:1] 0[dialect-conversion:1]       operation marked legal by the target  } -> SUCCESS
//===-------------------------------------------===//
 : [dialect-conversion:1] [dialect-conversion:1]      operation marked legal by the target  :  
//===-------------------------------------------===//
 Legalizing operation : [dialect-conversion:1] [dialect-conversion:1] ('  
comb.and  [dialect-conversion:1] ' i//===-------------------------------------------===//
  (2  [dialect-conversion:1] 0x7e626c006b80)//===-------------------------------------------===//

) {
 -> [dialect-conversion:1] [dialect-conversion:1] [dialect-conversion:1]     i      1  Legalizing operation : //===-------------------------------------------===//
  
'[dialect-conversion:1] [pattern-application PatternApplicator.cpp:54 2] comb.or    '   (%Legalizing operation : 0x7e625c0060f01') {
 = comb.and[dialect-conversion:1] '   comb.extract(   0x7e6254005f50  ) {
%[dialect-conversion:1] lhs     from   1%14 =  ":c om(b%.15ai = n2"d)c%" -> o13(im = 1%
b"8[pattern-application PatternApplicator.cpp:54 2] .c,   ao%n%m6d2b)" = .( : ocomb.extract%(r 10", %(i%rhs%113 9, )from, i :  %1(120) -> )i1, i : i1(1 ) -> : ii
1(1, [dialect-conversion:1]   i  i
2} -> SUCCESS1[dialect-conversion:1] ) : ) ->    ->   } -> SUCCESSoperation marked legal by the targeti : i
11operation marked legal by the target
[dialect-conversion:1] 
[pattern-application PatternApplicator.cpp:54 2]   [dialect-conversion:1]   
    %//===-------------------------------------------===//
[dialect-conversion:1]   3  [dialect-conversion:1] //===-------------------------------------------===//
 =   
[dialect-conversion:1] } -> SUCCESScomb.extract[dialect-conversion:1] 
 :    [dialect-conversion:1]   %  rhsoperation marked legal by the target//===-------------------------------------------===//
   
[dialect-conversion:1] //===-------------------------------------------===//
from[dialect-conversion:1]   [dialect-conversion:1]        1  Legalizing operation :   //===-------------------------------------------===//
'Legalizing operation : [dialect-conversion:1] comb.and'
' comb.or[dialect-conversion:1]  ('   :0x7e626c006c60(   ) {
0x7e6254006130(//===-------------------------------------------===//
[dialect-conversion:1] ) {
[dialect-conversion:1]   [dialect-conversion:1] i      2      )Legalizing operation :    -> 'comb.and' i(10x7e625c0062b0
) {
[pattern-application PatternApplicator.cpp:54 2] [dialect-conversion:1]         %4 = comb.xor bin% 16 = "%c0o, m%b2.or"(%11%, 15% = 15 "):c :  o(m%bii14.11 = 
a, "[pattern-application PatternApplicator.cpp:54 2] nci  do1"%m) -> (5bi% = .110acomb.and, n%
 d9[dialect-conversion:1] bin")   (   : %} -> SUCCESS%(0 : 8, , %operation marked legal by the targeti%2
16[dialect-conversion:1] , )    i//===-------------------------------------------===//
 :  1[dialect-conversion:1] (:) -> 
 [dialect-conversion:1] i  i1  1i, //===-------------------------------------------===//
1[dialect-conversion:1] i
  
1[pattern-application PatternApplicator.cpp:54 2]   ) ->   [dialect-conversion:1] Legalizing operation : %  i'6  1comb.and = } -> SUCCESS'  : (comb.xor
0x7e6254006210 operation marked legal by the target) {
[dialect-conversion:1] bin
[dialect-conversion:1]    [dialect-conversion:1]       %  } -> SUCCESS  1   : //===-------------------------------------------===//
, %[dialect-conversion:1] 3
operation marked legal by the target, [dialect-conversion:1] %
  5[dialect-conversion:1]     //===-------------------------------------------===//
  [dialect-conversion:1] //===-------------------------------------------===//
    [dialect-conversion:1] Legalizing operation : 
% '[dialect-conversion:1] 17:comb.or   =  '   "(//===-------------------------------------------===//
c0x7e626c006e40i[dialect-conversion:1] o) {
1  m[dialect-conversion:1] 
  b  [pattern-application PatternApplicator.cpp:54 2] Legalizing operation : .    'a%  comb.andn7' d = ("0x7e625c006390(comb.concat) {
% [dialect-conversion:1] 10  %,   6%  , 14%)4 :  (: i1, ii11, ) -> ii%1116
 = [pattern-application PatternApplicator.cpp:54 2] "
  c[dialect-conversion:1] o%  m8  b = } -> SUCCESS.% : ocomb.add15 roperation marked legal by the target = "%
"(lhs[dialect-conversion:1] c, %  o%11  mrhs, //===-------------------------------------------===//
b%[dialect-conversion:1] .15 {
a)synth.arch[dialect-conversion:1] n =    : d  "("//===-------------------------------------------===//
R(i[dialect-conversion:1] I%1  P10,   P, Legalizing operation : Li%'E113comb.xorC) -> )' A(iR : 0x7e62540062f01R() {
Y[dialect-conversion:1] "  
i  }1  [dialect-conversion:1]  ,   :  i } -> SUCCESS1 : ) -> i2ioperation marked legal by the target
1
[pattern-application PatternApplicator.cpp:54 2] [dialect-conversion:1]       %hw.output//===-------------------------------------------===//

18 [dialect-conversion:1]  = [dialect-conversion:1] 
%"  [dialect-conversion:1] 8c     o} -> SUCCESS  :m : //===-------------------------------------------===//
 b[dialect-conversion:1] operation marked legal by the target.
  ix[dialect-conversion:1]   2o  Legalizing operation : 
r  '"[pattern-application PatternApplicator.cpp:54 2] //===-------------------------------------------===//
comb.and(}' [dialect-conversion:1] %(
80x7e626c006f20[dialect-conversion:1] , ) {

  %[dialect-conversion:1] 
  7  //===-------------------------------------------===//
)[dialect-conversion:1]   [dialect-conversion:1]  : } -> SUCCESS    (
  [dialect-conversion:1] iLegalizing operation : //===-------------------------------------------===//
1', comb.or[dialect-conversion:1] ' i
(1[dialect-conversion:1] 0x7e625c006570) -> //===-------------------------------------------===//
) {
[dialect-conversion:1] [dialect-conversion:1] iLegalizing operation :   1'  hw.output  ' 
([dialect-conversion:1] 0x650f954f3520  ) {
  [dialect-conversion:1] } -> SUCCESS   : %operation marked legal by the target17
 = [dialect-conversion:1] "  c  o//===-------------------------------------------===//
m[dialect-conversion:1] b
.[dialect-conversion:1] a  n  d//===-------------------------------------------===//
"[dialect-conversion:1] (    %Legalizing operation : 10', comb.xor%' %8(16)0x7e62540063d0" = ) {
 : h"[dialect-conversion:1] (wc  .o  oim  u1bt, .pouirt1"") -> ((%i11%1, 8%%)1519 : 
) = ([dialect-conversion:1] " :   c(  io} -> SUCCESS2m : i) -> b1(.operation marked legal by the target, )x
io[dialect-conversion:1] 1r  
) -> "  ([dialect-conversion:1] //===-------------------------------------------===//
i%  1[dialect-conversion:1] 10* Fold {

, [dialect-conversion:1] %
  13  [dialect-conversion:1] )//===-------------------------------------------===//
  [dialect-conversion:1]  :     (} -> SUCCESS  [dialect-conversion:1]  : Legalizing operation : i  '1} -> FAILURE : comb.andoperation marked legal by the target, ' unable to fold
(i
[dialect-conversion:1] 0x7e626c0070001  ) {
) ->   [dialect-conversion:1] i//===-------------------------------------------===//
  1[dialect-conversion:1]   [dialect-conversion:1] 
  } -> FAILURE : [dialect-conversion:1] 
  no matched legalization pattern[dialect-conversion:1]   
  //===-------------------------------------------===//
[dialect-conversion:1]   [dialect-conversion:1] //===-------------------------------------------===//
} -> SUCCESS   :   Legalizing operation : 'operation marked legal by the targetcomb.and
' [dialect-conversion:1] (  0x7e625c006650  ) {
//===-------------------------------------------===//
[dialect-conversion:1]   [dialect-conversion:1]   
  [dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.concat' (0x7e62540065c0) {
[dialect-conversion:1] %  18   =   "comb.and"(%17, %7) : (i1%%, 1720 =  = i""1cc) -> oommbib.1.acnodn
"c([dialect-conversion:1] a%  t10  ", } -> SUCCESS(% : %1419), operation marked legal by the target% : 
18([dialect-conversion:1] ,   %  6i//===-------------------------------------------===//
)1 : [dialect-conversion:1] , (
[dialect-conversion:1]   ii  11//===-------------------------------------------===//
) -> , [dialect-conversion:1]   ii  11Legalizing operation : , 'comb.ori' 1(
) -> 0x7e626c0070e0) {
[dialect-conversion:1] [dialect-conversion:1] i    3    } -> SUCCESS   : 
[dialect-conversion:1]     } -> SUCCESSoperation marked legal by the target : 
[dialect-conversion:1]   operation marked legal by the target  
//===-------------------------------------------===//
[dialect-conversion:1] [dialect-conversion:1]   
  [dialect-conversion:1] //===-------------------------------------------===//
  [dialect-conversion:1]     //===-------------------------------------------===//
} -> SUCCESS[dialect-conversion:1]  :     pattern applied successfullyLegalizing operation : 
'comb.xor' (0x7e625c006730) {
[dialect-conversion:1]     [pattern-application PatternApplicator.cpp:54 2]   // *** IR Dump After Pattern Application ***
%19 = [pass-manager Pass.cpp:549 1] "Running pass 'cCSEo' on operation 'mb.or"(%16, %18) : (i1, %i181 = ) -> "comib1.xor"(%
8, [dialect-conversion:1] %  7  )} -> SUCCESS :  : (operation marked legal by the target
[dialect-conversion:1] i  1  , //===-------------------------------------------===//
[dialect-conversion:1] i
1[dialect-conversion:1] ) ->     //===-------------------------------------------===//
[dialect-conversion:1]   i  1Legalizing operation : 'comb.and' (0x7e626c0071c0) {
[dialect-conversion:1] 
      [dialect-conversion:1]     } -> SUCCESS : operation marked legal by the target
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1]     //===-------------------------------------------===//
[dialect-conversion:1]     Legalizing operation : 'comb.xor' (0x7e625c006810) {
[dialect-conversion:1]       %20 = "comb.and"(%17, %6) : (i1%, 19 = "ic1o) -> mb.xoir1"(%10, 
%13)[dialect-conversion:1]   hw.module   :  } -> SUCCESS( : @addioperation marked legal by the target1
, [dialect-conversion:1] (  i  in1//===-------------------------------------------===//
) ->  [dialect-conversion:1] %lhs
i : [dialect-conversion:1] 1    //===-------------------------------------------===//
[dialect-conversion:1]     iLegalizing operation : 2
', comb.xor[dialect-conversion:1] in' [pattern-application PatternApplicator.cpp:54 2]   ( hw.module  0x7e626c007d10%rhs } -> SUCCESS) {
 :  : @[dialect-conversion:1] add_sklanskey  i  operation marked legal by the target2(  
, in[dialect-conversion:1] out      %lhsout//===-------------------------------------------===//
 :  : [dialect-conversion:1] 
[dialect-conversion:1]   ii  23//===-------------------------------------------===//
, )[dialect-conversion:1] in     Legalizing operation : %rhs' : comb.concat' (i0x7e625c0069503) {
, [dialect-conversion:1] out     out%   : 21 = i"3c)om b{...}.xor"(%8, ' at %7) : ( {
i1[pattern-application PatternApplicator.cpp:54 2] ,   %loc(i%01"20 = ) -> c = comb.extracto"i mc1%bolhs-m tb
fromo. -[dialect-conversion:1] ca  0oi  ng} -> SUCCESS c- : :aa troperation marked legal by the target("i
(ti[dialect-conversion:1] h%3  .19)  m,  -> %//===-------------------------------------------===//
l18ii[dialect-conversion:1] , 1%r

6"[dialect-conversion:1] [pattern-application PatternApplicator.cpp:54 2] ): :     18%(  :1//===-------------------------------------------===//
1 = [dialect-conversion:1] i)  comb.extract1   , %
Legalizing operation : lhsi' 1comb.xorfrom, '  (i0x7e626c007dc011) {
) -> [dialect-conversion:1]        i:3 (i3)
 -> i[dialect-conversion:1] 1  
  [pattern-application PatternApplicator.cpp:54 2] } -> SUCCESS   : %2 = comb.extract operation marked legal by the target%
lhs[dialect-conversion:1]    from   //===-------------------------------------------===//
2[dialect-conversion:1]   } -> SUCCESS : pattern applied successfully
 : %(22 = [pattern-application PatternApplicator.cpp:54 2] i"// *** IR Dump After Pattern Application ***
3c)o -> mbi.1x
o[pattern-application PatternApplicator.cpp:54 2] r  "%(3 = %comb.extract10 , %%rhs13 )from  : 0( i:1 , (ii31)) ->  -> i1i
1[pattern-application PatternApplicator.cpp:54 2]   %4 = comb.extract 
%rhs [dialect-conversion:1] from     } -> SUCCESS1 :  operation marked legal by the target:
 [dialect-conversion:1] (    //===-------------------------------------------===//
i3[dialect-conversion:1] )
 -> [dialect-conversion:1]   i  1//===-------------------------------------------===//

[dialect-conversion:1] [pattern-application PatternApplicator.cpp:54 2]       %Legalizing operation : 5' = comb.concat' comb.extract( 0x7e626c0082e0%) {
rhs[dialect-conversion:1]    from     2 : (i3) -> i1
[pattern-application PatternApplicator.cpp:54 2]   %6 = comb.xor %0, %3 : i1
[pattern-application PatternApplicator.cpp:54 2]   %7 = comb.and %%230 = , "%c3om b:. coin1c
a[pattern-application PatternApplicator.cpp:54 2] t  "%(8 = %comb.xor22 , %%121, , %%46)  : :( i1
i[pattern-application PatternApplicator.cpp:54 2] 1  , %9 = icomb.and1 , %1, i%14) ->  : ii31
[pattern-application PatternApplicator.cpp:54 2]   %10 = 
comb.xor [dialect-conversion:1] %  2  , } -> SUCCESS% : 5 : operation marked legal by the targeti
1[dialect-conversion:1] 
  [pattern-application PatternApplicator.cpp:54 2]     //===-------------------------------------------===//
%[dialect-conversion:1] 11   = } -> SUCCESScomb.and :  pattern applied successfully%
2, %5 : [pattern-application PatternApplicator.cpp:54 2] i// *** IR Dump After Pattern Application ***
1
[pattern-application PatternApplicator.cpp:54 2]   %12 = comb.and %8, %7 : i1
[pattern-application PatternApplicator.cpp:54 2]   %13 = comb.or %9, %12 : i1
[pattern-application PatternApplicator.cpp:54 2]   %14 = comb.and %8, %6 : i1
[pattern-application PatternApplicator.cpp:54 2]   [pattern-application PatternApplicator.cpp:54 2] %hw.module15  = comb.and @%add_brent_kung10, %13 : (i1in
[pattern-application PatternApplicator.cpp:54 2]   % 16%lhs =  : comb.or %11, %i153 , :in  i%rhs1 : 
[pattern-application PatternApplicator.cpp:54 2]   i%317,  = outcomb.and  out : %10, i%314) : i1
[pattern-application PatternApplicator.cpp:54 2]   %18 = comb.xor %8, %7 : i1
[pattern-application PatternApplicator.cpp:54 2]   %19 = comb.xor % 10{, 
%13 :[pattern-application PatternApplicator.cpp:54 2]    i1%
0[pattern-application PatternApplicator.cpp:54 2]  =   %20comb.extract =  comb.concat %%lhs19 , from% 18, %60 : i1, i1, i 1:
 [pattern-application PatternApplicator.cpp:54 2]   (%21 = comb.addi 3%)lhs -> , %rhsi1 {
synth.arch[pattern-application PatternApplicator.cpp:54 2]  =   "S%K1L = ANScomb.extractK EY%"lhs }from  : 1i3
[pattern-application PatternApplicator.cpp:54 2]   hw.output %21 :  :i 3
([pattern-application PatternApplicator.cpp:54 2] }i3) -> 

i[dialect-conversion:1] 1} -> SUCCESS

[pattern-application PatternApplicator.cpp:54 2] [dialect-conversion:1]   //===-------------------------------------------===//
%[dialect-conversion:1] 2
 = [dialect-conversion:1] //===-------------------------------------------===//
[dialect-conversion:1] Legalizing operation : comb.extract' hw.output' %(lhs0x650f954f3a40 ) {
from[dialect-conversion:1]    2 : (i3) -> "ih1w
.[pattern-application PatternApplicator.cpp:54 2] o  utp%u3t = "(comb.extract% 21)% : rhs( from i3) -> 0()[pattern-application PatternApplicator.cpp:54 2] 
hw.module [dialect-conversion:1]  :   * Fold {
@(add_kogge_stonei3) -> ([dialect-conversion:1]   iin} -> FAILURE : 1
unable to fold [pattern-application PatternApplicator.cpp:54 2] 
%lhs   : %4 = [dialect-conversion:1] i} -> FAILURE : comb.extract3no matched legalization pattern , 
%in[dialect-conversion:1] rhs//===-------------------------------------------===//
  %rhsfrom :  i13, out out : i3) : (i3) -> i1
[pattern-application PatternApplicator.cpp:54 2]   %5 = comb.extract % rhs{ 
from 2[pattern-application PatternApplicator.cpp:54 2]   %0 = comb.extract  : %(lhs from i3)0 -> i1
[pattern-application PatternApplicator.cpp:54 2]   % 6: =  comb.xor( %0i, 3%)3 ->  :i 1
[pattern-application PatternApplicator.cpp:54 2]   i1%
1[pattern-application PatternApplicator.cpp:54 2]  =   %comb.extract7  = %comb.andlhs  from% 0, %13 : i1 
:[pattern-application PatternApplicator.cpp:54 2]    (%8 = icomb.xor3 ) -> %1, i%14
[pattern-application PatternApplicator.cpp:54 2]    : %2 = i1comb.extract
 [pattern-application PatternApplicator.cpp:54 2]   %%lhs9  = from comb.and 2%1, %4 :[pass-manager Pass.cpp:549 1]  Running pass ' CSE:' on operation 'i 1
([pattern-application PatternApplicator.cpp:54 2]   %i103 = ) -> comb.xor i%12
, [pattern-application PatternApplicator.cpp:54 2] %  5% 3: =  comb.extract i%1rhs
 [pattern-application PatternApplicator.cpp:54 2] from   %110 = comb.and %2, %5 :  : (ii13
)[pattern-application PatternApplicator.cpp:54 2]  ->   %i121 = 
[pattern-application PatternApplicator.cpp:54 2] comb.and   %%48 = , %comb.extract7  %:rhs  from i11
[pattern-application PatternApplicator.cpp:54 2]   %13 = comb.or  : %9(, %12i 3:)  -> ii11

[pattern-application PatternApplicator.cpp:54 2] [pattern-application PatternApplicator.cpp:54 2]     %%514 =  = comb.extractcomb.and  %%rhs8 , from% 62 : i1
[pattern-application PatternApplicator.cpp:54 2]    %:15  = (comb.andhw.module  i%3@10)add_sklanskey,  -> %13( i:in1  
%lhs[pattern-application PatternApplicator.cpp:54 2]  : i  1
%i[pattern-application PatternApplicator.cpp:54 2] 63   = , %in16comb.xor =   comb.or%rhs%  : 0%, i%1133, , % out15:   out: :  ii13
i)[pattern-application PatternApplicator.cpp:54 2] 1  
[pattern-application PatternApplicator.cpp:54 2] %  7 = %17comb.and =  comb.and% 0, %% 103{...},  %:14 ' at  : i1
i[pattern-application PatternApplicator.cpp:54 2] 1  
loc(%[pattern-application PatternApplicator.cpp:54 2] 8"   = c%ocomb.xor18m  = b%-comb.xor1t , o%%-84a, i% g7:-  a:r ii1t
ih[pattern-application PatternApplicator.cpp:54 2] 1.  
m%[pattern-application PatternApplicator.cpp:54 2] l9  i = r%"comb.and19:  = 33%:comb.xor11 , )%%10
4, % 13:  : i1
i[pattern-application PatternApplicator.cpp:54 2] 1  
[pattern-application PatternApplicator.cpp:54 2] %  10 = %20comb.xor =  comb.concat% 2, %%195,  %:18 , %6 i:1 
[pattern-application PatternApplicator.cpp:54 2]   %i111 = , comb.and i1%, 2, i%15
[pattern-application PatternApplicator.cpp:54 2]    : %21 = icomb.add1 
[pattern-application PatternApplicator.cpp:54 2] %  lhs, %%12rhs = comb.and  {%synth.arch8 = , %"7BRE N:T -KUNG"i1}
 [pattern-application PatternApplicator.cpp:54 2] :   %13 = icomb.or3 
[pattern-application PatternApplicator.cpp:54 2] %  9, hw.output%12  %:21  : i1i
3[pattern-application PatternApplicator.cpp:54 2] 
  [pattern-application PatternApplicator.cpp:54 2] }%14 = comb.and %
8
, %6[dialect-conversion:1] } -> SUCCESS 
:[dialect-conversion:1]  //===-------------------------------------------===//
[dialect-conversion:1] i
1[dialect-conversion:1] 
//===-------------------------------------------===//
[pattern-application PatternApplicator.cpp:54 2] [dialect-conversion:1]   Legalizing operation : '%hw.output15'  = (0x650f954f6c90comb.and) {
 [dialect-conversion:1]   %10, %9 : i1
[pattern-application PatternApplicator.cpp:54 2]   %16 = comb.or %11, %15 : i1
[pattern-application PatternApplicator.cpp:54 2]   %17" = hwcomb.and. ou%t10p, u%t8"( :% 21) : (i1
[pattern-application PatternApplicator.cpp:54 2]   i3%) -> 18( = )comb.and %17
, %7[dialect-conversion:1]    :* Fold {
 i1
[pattern-application PatternApplicator.cpp:54 2]   %19 = [dialect-conversion:1] comb.or   } -> FAILURE : %16unable to fold, 
%18 : i[dialect-conversion:1] 1} -> FAILURE : 
no matched legalization pattern[pattern-application PatternApplicator.cpp:54 2] 
  [dialect-conversion:1] //===-------------------------------------------===//
%20 = comb.and %17, %6 : i1
[pattern-application PatternApplicator.cpp:54 2]   %21 = comb.xor %8, %7 : i1
[pattern-application PatternApplicator.cpp:54 2]   %22 = comb.xor %10, %13 : i1
[pattern-application PatternApplicator.cpp:54 2]   %23 = comb.concat %22, %21, %6 : i1, i1, i1
[pattern-application PatternApplicator.cpp:54 2]   %24 = comb.add %lhs, %rhs {synth.arch = "KOGGE-STONE"} : i3
[pattern-application PatternApplicator.cpp:54 2]   hw.output %24 : i3
[pattern-application PatternApplicator.cpp:54 2] }

[dialect-conversion:1] } -> SUCCESS
[dialect-conversion:1] //===-------------------------------------------===//
[dialect-conversion:1] 
[dialect-conversion:1] //===-------------------------------------------===//
[dialect-conversion:1] Legalizing operation : 'hw.output' (0x650f954f57e0) {
[dialect-conversion:1]   "hw.output"(%24) : (i3) -> ()
[dialect-conversion:1]   * Fold {
[dialect-conversion:1]   } -> FAILURE : unable to fold
[pass-manager Pass.cpp:549 1] Running pass 'CSE[dialect-conversion:1] ' on operation '} -> FAILURE : no matched legalization pattern
[dialect-conversion:1] //===-------------------------------------------===//
hw.module @[pass-manager Pass.cpp:549 1] add_brent_kungRunning pass 'CSE' on operation '(in %lhs : i3, in %rhs : i3, out out : i3) {...}' at loc("comb-to-aig-arith.mlir":45:1)
hw.module @add_kogge_stone(in %lhs : i3, in %rhs : i3, out out : i3) {...}' at loc("comb-to-aig-arith.mlir":39:1)
[pass-manager Pass.cpp:1102 2] PassManager run completed with result: success
